/* TCP Time Server Program */

#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include<unistd.h>
#include<time.h>

struct sockaddr_in serv_addr, cli_addr;

int listenfd, connfd, r, w;

char buff[128]; /* buffer to send time */

unsigned short serv_port = 25030; /* port number used by the server */

int main()
{
	socklen_t clilen;

	/* initializing server socket address structure with zero values */
	bzero(&serv_addr, sizeof(serv_addr));

	/* filling up the server socket address structure with appropriate values */
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(serv_port);

	printf("\nTCP TIME SERVER.\n");

	/* creating socket */
	if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		printf("\nSERVER ERROR: Cannot create socket.\n");
		exit(1);
	}

	/* binding socket */
	if (bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0)
	{
		printf("\nSERVER ERROR: Bind failed.\n");
		close(listenfd);
		exit(1);
	}

	/* listen for client connections */
	if (listen(listenfd, 5) < 0)
	{
		printf("\nSERVER ERROR: Listen failed.\n");
		close(listenfd);
		exit(1);
	}

	printf("\nSERVER: Waiting for client on port %d...\n", serv_port);

	clilen = sizeof(cli_addr);

	/* accept client connection */
	connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &clilen);
	if (connfd < 0)
	{
		printf("\nSERVER ERROR: Accept failed.\n");
		close(listenfd);
		exit(1);
	}

	printf("\nSERVER: Client connected.\n");

	/* get current time */
	time_t now = time(NULL);
	snprintf(buff, sizeof(buff), "Server Time: %s", ctime(&now));

	/* send time to client */
	if ((w = write(connfd, buff, strlen(buff))) < 0)
	{
		printf("\nSERVER ERROR: Cannot send time to client.\n");
		close(connfd);
		close(listenfd);
		exit(1);
	}
	else
	{
		printf("\nSERVER: Sent time to client: %s", buff);
	}

	close(connfd);
	close(listenfd);
	exit(0);
} /*main ends*/

/* TCP Time Client Program */

#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include<unistd.h>

struct sockaddr_in serv_addr;

int skfd, r, w;

unsigned short serv_port = 25030; /* port number used by the server */
char serv_ip[] = "127.0.0.1";     /* server's IP-address */

char rbuff[128];  /* buffer for receiving server time */

int main()
{
	/* initializing server socket address structure with zero values */
	bzero(&serv_addr, sizeof(serv_addr));

	/* filling up the server socket address structure with appropriate values */
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(serv_port);
	inet_aton(serv_ip, (&serv_addr.sin_addr));

	printf("\nTCP TIME CLIENT.\n");

	/* creating socket */
	if ((skfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		printf("\nCLIENT ERROR: Cannot create socket.\n");
		exit(1);
	}

	/* request server for a connection */
	if ((connect(skfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr))) < 0)
	{
		printf("\nCLIENT ERROR: Cannot connect to the server.\n");
		close(skfd);
		exit(1);
	}
	printf("\nCLIENT: Connected to the server.\n");

	/* read time from server */
	if ((r = read(skfd, rbuff, sizeof(rbuff) - 1)) < 0)
	{
		printf("\nCLIENT ERROR: Cannot receive time from server.\n");
	}
	else
	{
		rbuff[r] = '\0';
		printf("\nCLIENT: Time from server: %s\n", rbuff);
	}

	close(skfd);
	exit(0);
} /*main ends*/

