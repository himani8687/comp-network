/* TCP Command Server Program */

#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include<unistd.h>

struct sockaddr_in serv_addr, cli_addr;

int listenfd, connfd, r, w;

char buff[128]; /* buffer to receive commands and send output */

unsigned short serv_port = 25020; /* port number used by the server */

int main()
{
	socklen_t clilen;

	/* initializing server socket address structure with zero values */
	bzero(&serv_addr, sizeof(serv_addr));

	/* filling up the server socket address structure with appropriate values */
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(serv_port);

	printf("\nTCP COMMAND SERVER.\n");

	/* creating socket */
	if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		printf("\nSERVER ERROR: Cannot create socket.\n");
		exit(1);
	}

	/* binding socket */
	if (bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0)
	{
		printf("\nSERVER ERROR: Bind failed.\n");
		close(listenfd);
		exit(1);
	}

	/* listen for client connections */
	if (listen(listenfd, 5) < 0)
	{
		printf("\nSERVER ERROR: Listen failed.\n");
		close(listenfd);
		exit(1);
	}

	printf("\nSERVER: Waiting for client on port %d...\n", serv_port);

	clilen = sizeof(cli_addr);

	/* accept client connection */
	connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &clilen);
	if (connfd < 0)
	{
		printf("\nSERVER ERROR: Accept failed.\n");
		close(listenfd);
		exit(1);
	}

	printf("\nSERVER: Client connected.\n");

	/* receive command from client */
	if ((r = read(connfd, buff, sizeof(buff))) < 0)
	{
		printf("\nSERVER ERROR: Cannot read from client.\n");
		close(connfd);
		close(listenfd);
		exit(1);
	}

	buff[r] = '\0';
	printf("\nSERVER: Received command: %s\n", buff);

	/* execute command */
	FILE *fp = popen(buff, "r");
	if (fp == NULL)
	{
		strcpy(buff, "SERVER ERROR: Failed to run command.\n");
		write(connfd, buff, strlen(buff));
	}
	else
	{
		/* read command output and send to client */
		while (fgets(buff, sizeof(buff), fp) != NULL)
		{
			write(connfd, buff, strlen(buff));
		}
		pclose(fp);
	}

	close(connfd);
	close(listenfd);
	exit(0);
} /*main ends*/


/* TCP Command Server Program */

#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#include<stdlib.h>
#include<stdio.h>
#include<unistd.h>

struct sockaddr_in serv_addr, cli_addr;

int listenfd, connfd, r, w;

char buff[128]; /* buffer to receive commands and send output */

unsigned short serv_port = 25020; /* port number used by the server */

int main()
{
	socklen_t clilen;

	/* initializing server socket address structure with zero values */
	bzero(&serv_addr, sizeof(serv_addr));

	/* filling up the server socket address structure with appropriate values */
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(serv_port);

	printf("\nTCP COMMAND SERVER.\n");

	/* creating socket */
	if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		printf("\nSERVER ERROR: Cannot create socket.\n");
		exit(1);
	}

	/* binding socket */
	if (bind(listenfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0)
	{
		printf("\nSERVER ERROR: Bind failed.\n");
		close(listenfd);
		exit(1);
	}

	/* listen for client connections */
	if (listen(listenfd, 5) < 0)
	{
		printf("\nSERVER ERROR: Listen failed.\n");
		close(listenfd);
		exit(1);
	}

	printf("\nSERVER: Waiting for client on port %d...\n", serv_port);

	clilen = sizeof(cli_addr);

	/* accept client connection */
	connfd = accept(listenfd, (struct sockaddr*)&cli_addr, &clilen);
	if (connfd < 0)
	{
		printf("\nSERVER ERROR: Accept failed.\n");
		close(listenfd);
		exit(1);
	}

	printf("\nSERVER: Client connected.\n");

	/* receive command from client */
	if ((r = read(connfd, buff, sizeof(buff))) < 0)
	{
		printf("\nSERVER ERROR: Cannot read from client.\n");
		close(connfd);
		close(listenfd);
		exit(1);
	}

	buff[r] = '\0';
	printf("\nSERVER: Received command: %s\n", buff);

	/* execute command */
	FILE *fp = popen(buff, "r");
	if (fp == NULL)
	{
		strcpy(buff, "SERVER ERROR: Failed to run command.\n");
		write(connfd, buff, strlen(buff));
	}
	else
	{
		/* read command output and send to client */
		while (fgets(buff, sizeof(buff), fp) != NULL)
		{
			write(connfd, buff, strlen(buff));
		}
		pclose(fp);
	}

	close(connfd);
	close(listenfd);
	exit(0);
} /*main ends*/

